const { fork } = require("child_process");
const path = require("path");
const fs = require("fs");

// The list of IMEIs and the date range
const imeiList = [
  350544506085516, 350544505596828, 350544506085433, 350317174365009,
  350317171088143, 357073293953382, 357073294010562, 357073294020058,
  357073294020116, 350317177724063, 350317177758277, 352016704390582,
  352016704394782, 352016704394055, 352016704393933, 352016704394881,
  350317177740895, 352016704470509, 352016704373364, 352016704373414,
  352016704369818, 352016704399070, 352016704373349, 352016704373273,
  352016704470426, 352016704392109, 352016704390228, 352016704390384,
  352016704471135, 352016704390285, 352016704135649, 352016704400530,
  352016704400381, 352016704390210, 352016704400555, 352016704471077,
  352016704400597, 352016704390277, 352016704390194, 352016704390137,
  352016704400480, 352016704392091, 352016704395870, 352016704472562,
  352016704385285, 352016704395268, 352016704395359, 352016704369594,
  352016704396118, 352016704395862, 352016704395961, 352016704396035,
  352016704395326, 352016704374255, 352016704372200, 352016704395490,
  352016704369354, 352016704395433, 352016704395920, 352016704372176,
  352016704401843, 352016704396126, 352016704395417, 350317177755455,
  350317177747023, 350317177789744, 350317177724246, 350317177741083,
  350317177746868, 350317177726910, 350317177755620, 350317177724188,
  350317177755554, 352016702704719, 352016702731936, 350317177740978,
  352016702708421, 352016702733684, 350317177740960, 352016702704701,
  352016704478924, 352016704478478, 352016704218387, 352016702733627,
  352016704393578, 352016704471366, 352016704372051, 352016702743105,
  352016704369735, 352016704369628, 352016704360445, 352016704373885,
  352016704369727, 352016702726118, 352016702743253, 352016704478767,
  352016702743170, 352016702726795, 352016702697905, 352016702731969,
  352016702732942, 352016704478981, 352016704470582, 352016704381599,
  352016704392950, 352016702733445, 352016704471150, 987654321123456,
  352016704471242, 352016704135490, 352016704399500, 987654321123411,
  987654321123454, 987654311113456, 123456789012345, 987654321123123,
  352016704397454, 352016704400563, 352016704373794, 352016704393347,
  352016704471085, 352016704373786, 350317177726928, 350317177724030,
  350317177741133, 350317175335862, 123456789334556, 350317177755547,
  350317177741125, 350317177744194, 350317177744905, 350317177754102,
  352016704393685, 350317177753476, 350317177753708, 350317177744756,
  352016704372986, 352016704391903, 350317171192051, 350317171191855,
  352016704391960,
];
const startDate = "2024-12-06";
const endDate = "2024-12-09";

// Size of each subset for child processes
const CHUNK_SIZE = 10;

// Function to split the IMEI list into chunks
const chunkArray = (array, size) => {
  const chunks = [];
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
};

// Split the IMEI list into smaller chunks
const imeiChunks = chunkArray(imeiList, CHUNK_SIZE);

// Function to spawn child processes for each chunk
const spawnChildProcesses = (chunks, startDate, endDate) => {
  chunks.forEach((chunk, index) => {
    const logFileName = `logs/process_log_${index + 1}.txt`; // Create a unique log filename for each child

    const child = fork(path.join(__dirname, "processChild.js"), [
      JSON.stringify(chunk),
      startDate,
      endDate,
      logFileName, // Pass the log file name to the child process
    ]);

    // Listen for messages from the child process
    child.on("message", (message) => {
      // This will log only the child's messages if necessary
      console.log(`Child ${index + 1}: ${message}`);
    });

    // Listen for errors from the child process
    child.on("error", (error) => {
      console.log(`Child ${index + 1} encountered an error: ${error.message}`);
    });

    // Handle child process exit
    child.on("exit", (code) => {
      if (code === 0) {
        console.log(`Child ${index + 1} completed successfully.`);
      } else {
        console.log(`Child ${index + 1} exited with code ${code}`);
      }
    });
  });
};

// Start processing the chunks
spawnChildProcesses(imeiChunks, startDate, endDate);
